// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SetupEntityFrameworkCoreApp.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SetupEntityFrameworkCoreApp.Data
{
    public partial class Context
    {
        private IContextProcedures _procedures;

        public virtual IContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ContextProcedures : IContextProcedures
    {
        private readonly Context _context;

        public ContextProcedures(Context context)
        {
            _context = context;
        }

        public virtual async Task<List<usp_SelectCatCountryContactTypeResult>> usp_SelectCatCountryContactTypeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SelectCatCountryContactTypeResult>("EXEC @returnValue = [dbo].[usp_SelectCatCountryContactType]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspCustomersOrderByResult>> uspCustomersOrderByAsync(string orderby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "orderby",
                    Size = 255,
                    Value = orderby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspCustomersOrderByResult>("EXEC @returnValue = [dbo].[uspCustomersOrderBy] @orderby = @orderby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspSupplierForProductResult>> uspSupplierForProductAsync(int? productIdentifier, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductIdentifier",
                    Value = productIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspSupplierForProductResult>("EXEC @returnValue = [dbo].[uspSupplierForProduct] @ProductIdentifier = @ProductIdentifier", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
